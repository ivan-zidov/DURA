str(djelatnici)
#tablica frekvencija
hormon <- read.csv2('hormon.csv')
attach(hormon)
#tablica frekvencija
hormon <- read.csv2('hormon.csv')
#Kvalitativne nominalne varijable: spol, pusenje, alkohol, kava, CLOtest, dijagnoza
#Numeri?ke neprekidne varijable: gastrS, somatS, somatZ
#Kako možemo konzistentno procijeniti medijan populacije korištenjem principa supstitucije? Dokažite
da je predloženi procjenitelj konzistentan.
#Kako možemo konzistentno procijeniti medijan populacije korištenjem #principa supstitucije? Dokažite
#da je predloženi procjenitelj konzistentan.
#zato jer volim ljube
setwd("C:/Users/user/Desktop/multi/MVA primjeri")
library(car)
library(MASS)
library(lmtest)
library(leaps)
library(nortest)
b<-read.csv("auto.csv")
attach(b)
origin<-factor(b$origin)
car.name <- as.character(car.name)
proizvodjaci <- lapply(car.name, function(x) return(strsplit(x," ")[[1]][1]))
proizvodjaci <- unlist(proizvodjaci)
str(b)
L100km <- 235.215/mpg
weight <- weight/2.205
displacement<-b$displacement*16.3871
horsepower[horsepower=="?"]<-c(60,60,70,80,80,90)
cylinders <- factor(cylinders)
horsepower <- droplevels(horsepower)
t<- names(table(horsepower))
hp <- factor(horsepower,levels(horsepower)[order(as.numeric(t))])
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
invBoxCox <- function(x, lambda) if (lambda == 0) exp(x) else (lambda*x + 1)^(1/lambda)
##deskriptivna statistika
#ovisna varijabla L100km (miles per gallon)
summary(L100km)
sd(L100km)
par(mfrow=c(1,2))
hist(L100km,breaks=30,main="Histogram varijable L100km",probability = T,ylab = "Frekvencija",col = "skyblue")
lines(density(L100km),col="red",lwd=2)
boxplot(L100km, main="Boxplot varijable L100km",col = "skyblue")
###################################################
#varijabla weight
varijabla <- weight
summary(varijabla)
sd(varijabla)
par(mfrow=c(1,2))
hist(varijabla,breaks=30,xlab = "weight",main="Histogram varijable weight",probability = T,ylab = "Gustoća",col = "skyblue")
lines(density(varijabla),col="red",lwd=2)
boxplot(varijabla,main="Boxplot varijable weight",col="skyblue")
dev.off()
x<-lm(L100km~varijabla)
plot(L100km~varijabla, main="Dijagram raspršenosti",col="blue",pch=19)
abline(x,col="red",lwd=2)
cor.test(L100km,varijabla,alternative="g")#odbacujemo H0, padaju?a korelacija
cor.test(L100km,varijabla,method="kendall")
cor(varijabla,L100km,method = "pearson")
###################################################
#varijabla displacement
varijabla <- displacement
summary(varijabla)
sd(varijabla)
par(mfrow=c(1,2))
hist(varijabla,breaks=30,xlab="displacement",main="Histogram varijable displacement",probability = T,ylab = "Gustoća",col = "skyblue")
lines(density(varijabla),col="red",lwd=2)
boxplot(varijabla,main="Boxplot varijable displacement",col="skyblue")
dev.off()
x<-lm(L100km~varijabla)
plot(L100km~varijabla, main="Dijagram raspršenosti",col="blue",pch=19,xlab="displacement")
abline(x,col="red",lwd=2)
cor.test(L100km,varijabla,alternative="g")#odbacujemo H0, padaju?a korelacija
cor.test(L100km,varijabla,method="kendall")
cor(varijabla,L100km,method = "pearson")
###################################################
#varijabla horsepower
varijabla <- as.numeric(as.character(horsepower[horsepower!="?"]))
summary(varijabla)
sd(varijabla)
par(mfrow=c(1,2))
hist(varijabla,breaks=30,xlab="horsepower",main="Histogram varijable horsepower",probability = T,ylab = "Frekvencija",col = "skyblue")
lines(density(varijabla),col="red",lwd=2)
boxplot(varijabla,main="Boxplot varijable horsepower",col="skyblue",xlab="horsepower")
dev.off()
x<-lm(L100km~varijabla)
plot(L100km~varijabla, main="Dijagram raspršenosti",col="blue",pch=19,xlab="horsepower")
abline(x,col="red",lwd=2)
cor.test(L100km,varijabla,alternative="g")#odbacujemo H0, padaju?a korelacija
cor.test(L100km,varijabla,method="kendall")
cor(varijabla,L100km,method = "pearson")
###################################################
#varijabla acceleration
varijabla <- acceleration
summary(varijabla)
sd(varijabla)
par(mfrow=c(1,2))
hist(varijabla,breaks=30,xlab="acceleration",main="Histogram varijable acceleration",probability = T,ylab = "Frekvencija",col = "skyblue")
lines(density(varijabla),col="red",lwd=2)
boxplot(varijabla,main="Boxplot varijable acceleration",col="skyblue",xlab="")
dev.off()
x<-lm(L100km~varijabla)
plot(L100km~varijabla, main="Dijagram raspršenosti",col="blue",pch=19,xlab="acceleration")
abline(x,col="red",lwd=2)
cor.test(L100km,varijabla,alternative="l")#odbacujemo H0, padaju?a korelacija
cor.test(L100km,varijabla,method="kendall")
cor(varijabla,L100km,method = "pearson")
#varijabla cylinders
#kategorijalna varijabla
cylinders<-factor(cylinders)
table(cylinders)
boxplot(L100km~cylinders,main="Boxplot L100km u odnosu na cylinders",col="skyblue")
barplot(table(cylinders),main="Frekvencije varijable cylinders",col="skyblue")
boxplot(L100km~cylinders,main="Boxplot L100km u odnosu na cylinders",col="skyblue")
anova<-aov(L100km~cylinders,data=df1)
df<-data.frame(cylinders,L100km)
df1<-df[order(cylinders),]
anova<-aov(L100km~cylinders,data=df1)
summary(anova)
anova
Anova()
#####1) MODEL
model<-lm(L100km~weight+acceleration+cylinders+as.numeric.factor(horsepower)+as.factor(model.year))
summary(model) #R^2 = 70.59%
##BOX-COX TRANSFORMACIJA
bc <- boxcox(model,plotit = T)
boxcox(model,plotit=T,lambda=seq(-1,1,by=0.1)) #lambda -0.25
lambda=0.3
Y<-(L100km^lambda-1)/lambda
###2) MODEL
model1<-lm(Y~weight+as.numeric.factor(horsepower)+cylinders)
ncvTest(model1) #p=0.3976
gqtest(model1) #p=0.1239
bptest(model1) #p=0.2978
summary(model1) #R squared=78.6%
invBoxCox(0.0009105,0.3)
invBoxCox(0.005471724,0.3)
invBoxCox(-0.516437824,0.3)
invBoxCox(-0.711619940,0.3)
invBoxCox(-0.256972384,0.3)
invBoxCox(-0.306887835,0.3)
confint(model1)
coef(model1)
invBoxCox(0.0009105,0.3)
invBoxCox(0.005471724,0.3)
invBoxCox(-0.516437824,0.3)
invBoxCox(-0.711619940,0.3)
invBoxCox(-0.256972384,0.3)
invBoxCox(-0.306887835,0.3)
invBoxCox(-0.5164378242                 +0.7116199401,0.3)
-0.5164378242                 +0.7116199401
invBoxCox(-0.5164378242                 +0.2569723841,0.3)
invBoxCox(+0.5164378242                 -0.2569723841,0.3)
-0.5164378242                 +0.2569723841
-0.2594654*0.3
-0.07783962^(1/0.3)
model1
predict(lm)
predict(model1)
predict(model1,newdata = c(1000,75,"3"))
b[328,]
testData <- data.frame(b[328,])
View(testData)
data.frame(c(3,4,5))
L100km[275]
data.frame(c(1000,70,5),row.names = c("weight","horsepower","origin"))
predict(model1,newdata = c(1000,75,3))
model1
testData <- data.frame(
weight = c(100)
)
View(testData)
testData <- data.frame(
weight = c(100),
as.numeric.factor(horsepower) = c(70),
cylinders = c(3)
)
testData <- data.frame(
weight = c(100),
horsepower = c(70),
cylinders = c(3)
)
predict(model1,newdata = testData)
factor(3)
testData <- data.frame(
weight = c(100),
horsepower = c(70),
cylinders = c(factor(3))
)
predict(model1,newdata = testData)
cylinders
b$cylinders
cylinders <- factor(cylinders)
attach(b)
origin<-factor(b$origin)
car.name <- as.character(car.name)
proizvodjaci <- lapply(car.name, function(x) return(strsplit(x," ")[[1]][1]))
proizvodjaci <- unlist(proizvodjaci)
str(b)
L100km <- 235.215/mpg
weight <- weight/2.205
displacement<-b$displacement*16.3871
horsepower[horsepower=="?"]<-c(60,60,70,80,80,90)
b<-read.csv("auto.csv")
attach(b)
origin<-factor(b$origin)
car.name <- as.character(car.name)
proizvodjaci <- lapply(car.name, function(x) return(strsplit(x," ")[[1]][1]))
proizvodjaci <- unlist(proizvodjaci)
str(b)
L100km <- 235.215/mpg
weight <- weight/2.205
displacement<-b$displacement*16.3871
horsepower[horsepower=="?"]<-c(60,60,70,80,80,90)
b<-read.csv("auto.csv")
attach(b)
origin<-factor(b$origin)
car.name <- as.character(car.name)
proizvodjaci <- lapply(car.name, function(x) return(strsplit(x," ")[[1]][1]))
proizvodjaci <- unlist(proizvodjaci)
str(b)
L100km <- 235.215/mpg
weight <- weight/2.205
displacement<-b$displacement*16.3871
horsepower[horsepower=="?"]<-c(60,60,70,80,80,90)
cylinders <- factor(cylinders)
horsepower <- droplevels(horsepower)
t<- names(table(horsepower))
hp <- factor(horsepower,levels(horsepower)[order(as.numeric(t))])
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
invBoxCox <- function(x, lambda) if (lambda == 0) exp(x) else (lambda*x + 1)^(1/lambda)
##deskriptivna statistika
#ovisna varijabla L100km (miles per gallon)
summary(L100km)
#varijabla cylinders
#kategorijalna varijabla
cylinders<-factor(cylinders)
table(cylinders)
#####1) MODEL
model<-lm(L100km~weight+acceleration+cylinders+as.numeric.factor(horsepower)+as.factor(model.year))
summary(model) #R^2 = 70.59%
##BOX-COX TRANSFORMACIJA
bc <- boxcox(model,plotit = T)
boxcox(model,plotit=T,lambda=seq(-1,1,by=0.1)) #lambda -0.25
lambda=0.3
Y<-(L100km^lambda-1)/lambda
###2) MODEL
model1<-lm(Y~weight+as.numeric.factor(horsepower)+cylinders)
ncvTest(model1) #p=0.3976
gqtest(model1) #p=0.1239
bptest(model1) #p=0.2978
testData <- data.frame(
weight = c(100),
horsepower = c(70),
cylinders = c(factor(3))
)
predict(model1,newdata = testData)
cylinders
testData <- data.frame(
weight = c(100),
horsepower = c(70),
cylinders = c(as.factor(3))
)
predict(model1,newdata = testData)
as.factor(3)
as.factor("3")
testData <- data.frame(
weight = c(100),
horsepower = c(70),
cylinders = c(as.factor("4"))
)
predict(model1,newdata = testData)
cylinders[1]
testData <- data.frame(
weight = c(100),
horsepower = c(70),
cylinders = c(cylinders[1])
)
predict(model1,newdata = testData)
summary(model1)
coef(model1)
testData <- data.frame(
c(100),
c(70),
c(cylinders[1])
)
View(testData)
predict(model1,newdata = testData)
testData <- data.frame(
c(100),
c(70),
c(4)
)
predict(model1,newdata = testData)
testData <- data.frame(
c(100),
c(70),
c(as.factor(4))
)
predict(model1,newdata = testData)
predict(model1,newdata = c(c(1000,75,as.factor(4))))
c(c(1000,75,as.factor(4)))
predict(model1,newdata = as.data.frame.list(c(1000,75,as.factor(4))))
predict(model1,newdata = as.data.frame.list(c(1000,75,as.factor(4))))
as.data.frame.list(c(1000,75,as.factor(4)))
as.data.frame.list(c(1000,75,as.factor(6)))
predict(model1,newdata = as.data.frame.list(c(1000,75,(4))))
predict.lm(model1,newdata = as.data.frame.list(c(1000,75,(4))))
predict.lm(model1,newdata = as.data.frame.list(c(1000,75,cylinders[1])))
as.data.frame.list(c(1000,75,cylinders[1])
as.data.frame.list(c(1000,75,cylinders[1]))
as.data.frame.list(c(1000,75,cylinders[1]),
col.names = attr(model1$terms, "term.labels"))
testData<-as.data.frame.list(c(1000,75,cylinders[1]),
col.names = attr(model1$terms, "term.labels"))
predict(model1,newdata = testData)
predict.lm(model1,newdata = testData)
View(testData)
testData
testData<-as.data.frame.list(c(1000,horsepower[1],cylinders[1]),
col.names = attr(model1$terms, "term.labels"))
predict.lm(model1,newdata = testData)
testData<-as.data.frame.list(c(1500,horsepower[1],cylinders[1]),
col.names = attr(model1$terms, "term.labels"))
predict.lm(model1,newdata = testData)
View(testData)
testData<-as.data.frame.list(c(1500,75,cylinders[1]),
col.names = attr(model1$terms, "term.labels"))
predict.lm(model1,newdata = testData)
View(testData)
as.data.frame.list(c(1500,75,cylinders[1]),
col.names = attr(model1$terms, "term.labels"))
as.data.frame(c(1500,75,cylinders[1]),
col.names = attr(model1$terms, "term.labels"))
as.data.frame.list(c(1500,75,cylinders[1]),
col.names = attr(model1$terms, "term.labels"))
summary(model1)
predict(model1,newdata = testData)
predict(model1,newdata = testData, interval = "confidence")
testData<-as.data.frame.list(c(1500,75,4),
col.names = attr(model1$terms, "term.labels"))
predict(model1,newdata = testData)
predict(model1)
invBoxCox(predict(model1),0.3)
plot(invBoxCox(predict(model1),0.3))
plot(invBoxCox(predict(model1),0.3)-L100km)
#####1) MODEL
hp <- as.numeric.factor(horsepower)
model<-lm(L100km~weight+acceleration+cylinders+hp+as.factor(model.year))
summary(model) #R^2 = 70.59%
###2) MODEL
hp <- as.numeric.factor(horsepower)
model1<-lm(Y~weight+hp+cylinders)
ncvTest(model1) #p=0.3976
gqtest(model1) #p=0.1239
bptest(model1) #p=0.2978
summary(model1) #R squared=78.6%
testData<-as.data.frame.list(c(1500,75,4),
col.names = attr(model1$terms, "term.labels"))
predict(model1,newdata = testData)
View(testData)
testData<-as.data.frame.list(c(1500,75,cylinders[1]),
col.names = attr(model1$terms, "term.labels"))
predict(model1,newdata = testData)
View(testData)
str(testData)
cylinders
levels(cylinders)
as.factor(6)
testData<-as.data.frame.list(c(1500,75,as.factor(6)),
col.names = attr(model1$terms, "term.labels"))
predict(model1,newdata = testData)
testData<-as.data.frame.list(c(1500,75,cylinders),
col.names = attr(model1$terms, "term.labels"))
predict(model1,newdata = testData)
View(testData)
factor(6)
factor(6,levels = levels(cylinders))
testData<-as.data.frame.list(c(1500,75,factor(6,levels = levels(cylinders))),
col.names = attr(model1$terms, "term.labels"))
predict(model1,newdata = testData)
str(testData)
testData$cylinders
factor(testData$cylinders,levels = levels(cylinders)))
factor(testData$cylinders,levels = levels(cylinders))
testData<-as.data.frame.list(c(1500,75,6),
col.names = attr(model1$terms, "term.labels"))
predict(model1,newdata = testData)
testData$cylinders <- factor(testData$cylinders,levels = levels(cylinders))
predict(model1,newdata = testData)
testData<-as.data.frame.list(c(1500,75,4),
col.names = attr(model1$terms, "term.labels"))
testData$cylinders <- factor(testData$cylinders,levels = levels(cylinders))
predict(model1,newdata = testData)
invBoxCox(3.593814 -3.334349)
invBoxCox(3.593814 -3.334349,0.3)
invBoxCox(3.593814,0.3)
invBoxCox(3.593814,0.3)-invBoxCox(3.334349,0.3)
invBoxCox(3.334349,0.3)
setwd("C:/Users/user/Desktop/multi")
setwd("C:/Users/user/DURA")
data <- read.csv("BookingComments.csv")
hist(data$Ocjena)
hist(data$Ocjena,breaks = 100)
hist(data$Ocjena,breaks = 100)
barplot(table(data$Ocjena))
